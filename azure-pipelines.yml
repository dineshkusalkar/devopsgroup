trigger:
- main

pool:
  name: Agent02

stages:
  - stage: Deployment
    displayName: "stage1"
    jobs:
      - job: infrastructure_deployment
        displayName: "Deplouy infrastructure"
        steps:
          - checkout: self

          - task: AzureCLI@2
            inputs:
              azureSubscription: 'mysp'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                terraform init -reconfigure -backend-config="access_key=$(TF_BACKEND_ACCESS_KEY)"
                terraform workspace new Dev
                terraform plan
                terraform apply --auto-approve
            displayName: "terraform plan & apply"
#################################################################################################################
trigger:
- main

pool:
 name: Agent3

stages:
- stage: Deployment
  displayName: 'deployment stage1'
  jobs:
  - job: InfrastructureDeployment
    displayName: 'Deploy Instrastructure'
    steps:
    - checkout: self

    - task: AzureCLI@2
      inputs:
        azureSubscription: 'mysp'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          terraform init
          terraform plan
          terraform apply --auto-approve


####################################################################################




trigger:
  branches:
    include:
      - main

pool:
  name: Default

stages:   // Stages help you break down your pipeline into different parts  &  Common stages might include "Build," "Test," "Deploy to Staging," and "Deploy to Production."

- stage: Deployment
  displayName: 'Deployment Stage'
  jobs:       // A job is a collection of steps that are executed on a specific agent 
  - job: InfrastructureDeployment
    displayName: 'Deploy Infrastructure'
    steps:     // A step is a single unit of work within a job  && The steps represent the specific tasks that are executed within each job.
    - checkout: self    // these command instruct the CICD pipeline to checkout the sourecode from repo where pipeline is defined.

    - task: AzureCLI@2
      inputs:
        azureSubscription: 'myapp vmss'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          cd $(Build.SourcesDirectory)/terraform-files
          terraform init -reconfigure -backend-config="access_key=$(TF_BACKEND_ACCESS_KEY)"
          terraform workspace new Dev
          terraform plan
          terraform apply --auto-approve
      displayName: 'Terraform plan and apply'

    - task: AzureCLI@2
      inputs:
        azureSubscription: 'myapp vmss'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          # Get the instance IDs of all instances within the VM Scale Set
          instance_ids=$(az vmss list-instances --resource-group practise-project35 --name ewit35 --query "[].instanceId" --output tsv)
          
          for instance_id in $instance_ids; do
            az vmss run-command invoke --resource-group practise-project35 --name ewit35 --instance-id $instance_id --command-id RunShellScript --scripts 'curl -o custom_script3.sh https://sore1.blob.core.windows.net/new1/custom_script3.sh && chmod +x custom_script3.sh && ./custom_script3.sh'
          done
      displayName: 'Shell script'



